import operator
import functools
import pickle
import itertools

instructions = open("instructions.txt",'r').read().split('\n')

stack = []
memo = {}
frozensets = []

for inst in instructions:
    # parse instruction + value
    try:
        brk = inst.index(' ')
        opcode = inst[:brk]
        val = inst[brk:].strip()
    except ValueError:
        opcode = inst
        val = ""

    match opcode:
        case "PROTO":
            print("Protocol: " + val)

        case "FRAME":
            print("Frame: " + val)

        case "MARK":
            stack.append("MARK")

        case "NONE":
            "do nothing"

        case "POP":
            stack.pop()

        case "BININT1":
            stack.append(int(val))

        case "BININT2":
            stack.append(int(val))

        case "BINFLOAT":
            stack.append(float(val))

        case "BINUNICODE":
            stack.append(val.replace("'",""))

        case "UNICODE":
            stack.append(val.replace("'",""))

        case "SHORT_BINUNICODE":
            stack.append(val.replace("'",""))

        case "MEMOIZE":
            memo[val.replace("(as ","").replace(")","")] = stack[-1]

        case "TUPLE1":
            stack.append((stack.pop(),))

        case "TUPLE2":
            second = stack.pop()
            first = stack.pop()
            stack.append((first,second))

        case "LONG1":
            stack.append(val)

        case "FROZENSET":
            frozenset = {stack.pop()} # first element
            while stack[-1] != "MARK":
                frozenset.add(stack.pop()) # may add in wrong order
            stack.pop() # MARK
            frozensets.append(frozenset)

        case "BINGET":
            stack.append(memo[val])

        case "LONG_BINGET":
            stack.append(memo[val])

        case "NEWTRUE":
            stack.append(True)

        case "TUPLE":
            tup = []
            while (stack[-1] != "MARK"):
                tup.insert(0,stack.pop())
            stack.pop() # MARK
            stack.append(tuple(tup))

        case "LIST":
            ls = []
            while (stack[-1] != "MARK"):
                ls.insert(0,stack.pop())
            stack.pop() # MARK
            stack.append(ls)

        case "DICT":
            dictry = {}
            second = stack.pop()
            first = stack.pop()
            while (stack[-1] != "MARK"):
                ls[first] = second
            stack.pop() # MARK
            stack.append(dictry)

        case "GLOBAL":
            stack.append(eval(""+val[val.index(' '):].strip()[:-1]))

        case "STACK_GLOBAL":
            second = stack.pop()
            first = stack.pop()
            if first == "builtins": stack.append(eval(second))
            else: stack.append(eval(first+"."+second))

        case "GET":
            stack.append(memo[val])

        case "STOP":
            "do nothing"

        case "REDUCE":
            args = stack.pop()
            func = stack.pop()
            print("=========== FUNCTION EVAL ===========")
            print("    Stack: " + str(stack))
            print("    Evaluating: " + func.__qualname__ + str(args))
            if type(args[0]) == reversed: 
                output = bytes(reversed(b'.\xc2\x94t\xc2\x94 ?kens\x06\xc2\x8c\xc2\x9a\xc2\x99\xc2\x99\xc2\x99\xc2\x99\xc2\x99\xc2\xb9?G\xc2\x94(: desufnoc kens\x10\xc2\x8c\xc2\x94R\x01\xc2\x8c\xc2\x94L\x01\xc2\x8c\xc2\x94(: das kens\x0b\xc2\x8c\xc2\x94r\x01\xc2\x8c\xc2\x94txt.galf\x08\xc2\x8c\xc2\x94D: yppah kens\r\xc2\x8c\x02K\x059M\xc2\x94(: daed kens\x0c\xc2\x8c\x01K\xc2\x94\xc2\x85\xc2\x94hsulf\x05\xc2\x8c\xc2\x94\n\x01\xc2\x8c\xc2\x94.\x01\xc2\x8c\xc2\x94o\x01\xc2\x8c\xc2\x94#\x01\xc2\x8c\xc2\x94\x00\xc2\x8c\xc2\x88\xc2\x94\xc2\x86\x00K\x01K\xc2\x94\xc2\x86\x00K\x00K\xc2\x94\xc2\x91_h\xc2\x94\xc2\x86\x06K\x06K\xc2\xadh\x00\x00\x01!j\xc2\x94\xc2\x86\x07K\x01K\xc2\x94\xc2\x86\x13K\x08K\xc2\x85h\xc2\x81h\x00\x00\x01 jSh~h\'h\xc2\x94\xc2\x86\nK\x04K"h\xc2\x94\xc2\x86\x0fK\x07K\xc3\xa3h\xc2\x94\xc2\x86\x03K\x12K\xc2\x94\xc2\x86\x04K\x06K\xc3\x9fh\x00\x00\x01\njvh\x1ch\xc2\x94\xc2\x86\x04K\x02K\xc2\x94\xc2\x86\x07K\x00K\xc2\x94\xc2\x86\x08K\x08K\xc2\xbeh\xc3\x9dh\x14h\xc2\x94\xc2\x86\x06K\x05K\xc2\x94\xc2\x86\x03K\x03K\xc2\x98h\xc2\x94\xc2\x86\x0eK\x06Kkh\x00\x00\x01\x04j\xc2\x95h\xc3\x99h\xc2\x94\xc2\x86\x0eK\x0bK\xc3\x98h\xc3\x97h\xc2\x94\xc2\x86\x13K\x05K\xc3\x96h\xc3\x94h\xc3\xb0h\nh\x0fh\x06heh\xc2\x94\xc2\x86\x13K\x0cKdh\xc3\xadh(\xc2\x94\xc2\x91\xc2\x94\xc2\x86\x0eK\x07K\xc3\x90h\xc2\x94\xc2\x86\x05K\x07K\xc3\x8eh\xc2\x94\xc2\x86\x05K\x10K\xc3\xa8h\\h\xc2\x81h\xc2\x94\xc2\x86\tK\x00K\xc2\x94\xc2\x86\rK\x11K\xc2\xa9h}h\xc2\x94\xc2\x86\x00K\tK\xc3\x86hOh!h\xc3\xa2h\xc2\x94\xc2\x86\x0fK\x10K{h\xc2\xa5h\xc3\xbah\xc3\x84h\xc2\x94\xc2\x86\x00K\x12K\xc2\x94\xc2\x86\x07K\x0fK\xc2\x94\xc2\x86\nK\rK1h\x1dh\xc2\x94\xc2\x86\x04K\rK\xc2\x94\xc2\x86\x07K\x0bK\x19h\x17h\xc2\x94\xc2\x86\x12K\x05Krh\xc2\x94\xc2\x86\x02K\x08K\x14h\xc3\xb4hDh\xc2\x94\xc2\x86\x13K\x12K\xc2\x94\xc2\x86\rK\x10K\xc2\x94\xc2\x86\x05K\x06K\xc2\x94\xc2\x86\x0eK\rK\x11h\xc2\xb5h\xc2\x94\xc2\x86\x11K\x00K\xc2\x94\xc2\x86\x06K\nK\x08h\xc2\x94\xc2\x86\x01K\x0eK\xc2\x8chbh5h(\xc2\x94\xc2\x91\xc2\x94\xc2\x86\x08K\x07K\xc3\xa9h\xc2\x94\xc2\x86\x0eK\x10K0h\xc3\xa8h\xc3\x8ch\xc3\x8dh]h\xc2\x94\xc2\x86\x04K\nK,h\xc2\xa8h~h\xc3\xbch\xc3\x87h"h!h{hMh\xc3\xb8h\xc3\x82h\xc3\x81h\xc2\x94\xc2\x86\x0bK\x01KthyhIh\xc2\x94\xc2\x86\x11K\x11K\xc2\xa0h\x16h\xc2\x94\xc2\x86\x0fK\x0cK\xc2\x94\xc2\x86\x02K\x04K\xc2\x97h\xc2\xb9h\xc2\x94\xc2\x86\x11K\rK\xc2\x94\xc2\x86\x11K\x02KAh\xc2\x94\xc2\x86\x0bK\x0fK\xc2\x94\xc2\x86\x08K\rK\x11h\xc2\x94\xc2\x86\tK\x01K\xc2\x94\xc2\x86\x04K\x10K>h\xc2\x94\xc2\x86\x02K\rKhh\xc2\x94\xc2\x86\x12K\x13K\xc3\x96h;h\nh\xc2\xb0h\x06hbh(\xc2\x94\xc2\x913h`h\xc2\xbch\xc2\xadh\xc2\xach.hYh\xc2\x94\xc2\x86\x04K\x01K\xc3\xa7h\xc2\xa9h\xc3\x89h(h\xc2\x94\xc2\x86\x04K\x13K\'hRhPh\xc2\x94\xc2\x86\x13K\x06K\xc3\xa2h\xc2\x94\xc2\x86\x0cK\x10K\xc2\x94\xc2\x86\rK\rK\xc2\x94\xc2\x86\x10K\rK\xc3\xa1h\xc2\x94\xc2\x86\x13K\x0bK\xc3\x82hxhJh\x1bh\x1ah\xc2\x94\xc2\x86\x01K\x0bKph\xc2\x94\xc2\x86\x02K\x13K\xc3\x9dh\xc2\x94\xc2\x86\x0eK\x04K\xc2\x99hDhBh\xc2\x94\xc2\x86\x0fK\x01K\xc2\x94\xc2\x86\x01K\x12K\xc2\x94\xc2\x86\x0bK\rK\xc3\x96h\x07h\nh\xc2\x94\xc2\x86\x13K\x03K\xc2\x91h\x05h\xc2\x94\xc2\x86\x00K\x13K\xc2\x94\xc2\x86\x07K\x0eK\x03h\xc2\x94\xc2\x86\x07K\x0cK\xc2\x94\xc2\x86\x00K\x04K(\xc2\x94\xc2\x91\xc2\x94\xc2\x86\x12K\x0fK\xc2\x94\xc2\x86\x0bK\x07K\xc2\x94\xc2\x86\x06K\x02KWh\xc2\x94\xc2\x86\nK\x13K\xc2\x82h\xc2\xaah\xc2\x94\xc2\x86\x01K\x01K\xc2\x94\xc2\x86\x07K\x08KShRh)h&h\xc3\x87h\xc2\x94\xc2\x86\x02K\x03K\xc2\xa7h!h\xc2\x94\xc2\x86\x10K\x06K\xc2\x94\xc2\x86\x13K\x0fK{h\xc2\xa5h\xc3\x84h\xc2\x94\xc2\x86\x0eK\x01K\xc2\x94\xc2\x86\x11K\nK\xc2\x94\xc2\x86\nK\x02K\xc3\x81huhth\x1bh\xc2\x94\xc2\x86\nK\tK\xc2\xa0h\xc2\x94\xc2\x86\x0cK\x03K\xc2\xbdh\xc2\x99h\xc2\x94\xc2\x86\x06K\x0cK\xc2\x94\xc2\x86\x08K\x0fK\xc2\x94\xc2\x86\x0bK\x00K\xc2\x94\xc2\x86\x0bK\x02K\xc2\xb3h\xc2\x94\xc2\x86\x12K\x11K\xc2\x94\xc2\x86\x03K\nK\xc2\x94\xc2\x86\x0eK\tK\xc2\xb1h\xc2\x94\xc2\x86\x02K\x0bK\x0eh\xc2\x94\xc2\x86\x06K\x11Keh\xc2\x94\xc2\x86\x02K\tK\xc2\x94\xc2\x86\x0cK\x04K\xc2\x8fh(\xc2\x94\xc2\x91\xc2\x94\xc2\x86\x11K\x10K\xc2\x94\xc2\x86\x12K\x0bK\xc2\x94\xc2\x86\nK\x01K/h\xc2\x94\xc2\x86\x06K\x0fK\xc2\x94\xc2\x86\x12K\tK\xc2\x94\xc2\x86\x03K\x02K\xc2\x81h\xc2\x94\xc2\x86\x00K\rKXhVh\xc2\xa8h\xc2\x94\xc2\x86\x0eK\x03K\xc2\x94\xc2\x86\x0bK\x03K\xc2\x94\xc2\x86\x04K\x11K"h\xc2\x94\xc2\x86\x0bK\x0cK!h\xc2\x94\xc2\x86\nK\x06K h\xc2\x94\xc2\x86\x06K\x10K\xc2\x94\xc2\x86\rK\x0fK\xc2\x94\xc2\x86\x13K\x00K\xc2\x94\xc2\x86\rK\x0bK\xc2\x94\xc2\x86\x04K\x00K\x17h\xc2\x94\xc2\x86\x07K\tK\xc2\x94\xc2\x86\x11K\x04KGh\xc2\x94\xc2\x86\x06K\x03K\xc2\x94\xc2\x86\x12K\x00KBh\xc2\x94\xc2\x86\rK\x12Klh\xc2\x94\xc2\x86\x08K\x06K\xc2\x94\xc2\x86\x0eK\x0fK\xc2\x94\xc2\x86\nK\x10K\xc2\x94\xc2\x86\x01K\x07K\xc2\x94\xc2\x86\x04K\x07K\xc2\x94\xc2\x86\x0fK\nK\xc2\x94h\xc2\x94\xc2\x86\x08K\x0bK\xc2\x94\xc2\x86\x11K\tK\xc2\x94\xc2\x86\x02K\x02K\xc2\x94\xc2\x86\x08K\tK\nh\xc2\x94\xc2\x86\x02K\x00K\xc2\x92hgh\xc2\x94\xc2\x86\x00K\x08K(\xc2\x94\xc2\x912h_h\xc2\x89h\xc2\x94\xc2\x86\x02K\x07K\xc2\x94\xc2\x86\x06K\rK\xc2\x86h\xc2\x94\xc2\x86\x0cK\x0bK\xc2\x94\xc2\x86\x0cK\tK\xc2\x94\xc2\x86\x07K\x13KUh*h\xc2\x94\xc2\x86\x13K\x04K&h%h\xc2\x94\xc2\x86\x05K\x0cK!h\xc2\x94\xc2\x86\x06K\x07Kzh\xc2\x94\xc2\x86\nK\x0fK\xc2\x94\xc2\x86\x10K\x02Kxh\xc2\x94\xc2\x86\x08K\nK\xc2\x94\xc2\x86\x07K\rKIh\xc2\x94\xc2\x86\nK\x00K\xc2\x94\xc2\x86\x0bK\x13K\x18h\xc2\x94\xc2\x86\x05K\x13K\xc2\x94\xc2\x86\x0fK\x03K\xc2\x94\xc2\x86\x12K\x0cK\xc2\x94\xc2\x86\x12K\x03K\xc2\x94\xc2\x86\x12K\x0eK\xc2\x94\xc2\x86\x03K\x0eK\xc2\x94\xc2\x86\x05K\x04K\xc2\x94\xc2\x86\x00K\x03K\xc2\x94\xc2\x86\rK\x07Klh\xc2\x94\xc2\x86\x11K\x0bK\xc2\x94\xc2\x86\x08K\x02K\xc2\x94\xc2\x86\x08K\x00K\xc2\x94\xc2\x86\x05K\x00K\xc2\x94\xc2\x86\x03K\x13K\xc2\x94\xc2\x86\x0fK\x04K\x05h\xc2\x94\xc2\x86\x07K\x05K\xc2\x94\xc2\x86\x06K\x04K\xc2\x94\xc2\x86\x07K\x03K\xc2\x94\xc2\x86\nK\x0cK\xc2\x94\xc2\x86\x04K\x0eK\x03h(\xc2\x94\xc2\x91\xc2\x94\xc2\x86\x0fK\x0fK3h\xc2\x94\xc2\x86\x02K\x12K\xc2\x94\xc2\x86\x13K\nK\xc2\x94\xc2\x86\x0fK\x00K\xc2\x94\xc2\x86\x0cK\x00K\xc2\x94\xc2\x86\x0fK\tK\xc2\x94\xc2\x86\x01K\nK\xc2\x94\xc2\x86\x07K\nK\xc2\x94\xc2\x86\tK\x0bK\xc2\x94\xc2\x86\x11K\x05K\xc2\x94\xc2\x86\x0eK\x05K,h\xc2\x94\xc2\x86\tK\tK*h\xc2\x94\xc2\x86\rK\x04K\xc2\x94\xc2\x86\x07K\x11K\xc2\x94\xc2\x86\x08K\x0cK\xc2\x94\xc2\x86\rK\x06K\xc2\x94\xc2\x86\tK\x07K\xc2\x94\xc2\x86\x11K\x13K\xc2\x94\xc2\x86\rK\x00K\xc2\x94\xc2\x86\x05K\x01K\xc2\x94\xc2\x86\x01K\rK\xc2\x94\xc2\x86\x04K\x0fKJh\xc2\x94\xc2\x86\x11K\x08K\xc2\x94\xc2\x86\x05K\nK\xc2\x94\xc2\x86\x05K\x08K\x18h\xc2\x94\xc2\x86\x0eK\x11K\xc2\x94\xc2\x86\x01K\tKFh\x13h\xc2\x94\xc2\x86\x02K\x11K\xc2\x94\xc2\x86\x00K\x0eK\xc2\x94\xc2\x86\x11K\x06K\xc2\x94\xc2\x86\x11K\x0fK\xc2\x94\xc2\x86\x10K\x10K\xc2\x94\xc2\x86\x02K\x06K\xc2\x94\xc2\x86\x0cK\x01K\xc2\x94\xc2\x86\x12K\x08K\x0fh8h\xc2\x94\xc2\x86\rK\x05K\xc2\x94\xc2\x86\x10K\x03K\xc2\x94\xc2\x86\nK\x03K\xc2\x94\xc2\x86\x01K\x03K\xc2\x94\xc2\x86\x11K\x12K\xc2\x94\xc2\x86\x11K\x07K(\xc2\x94\xc2\x91\xc2\x94\xc2\x86\x03K\x06K\xc2\x94\xc2\x86\x0fK\rK\xc2\x94\xc2\x86\tK\x0fK\xc2\x94\xc2\x86\x03K\rK\xc2\x94\xc2\x86\x00K\x0fK\xc2\x94\xc2\x86\x10K\nK\xc2\x94\xc2\x86\tK\x02K\xc2\x94\xc2\x86\rK\x08K\xc2\x94\xc2\x86\x13K\x11K\xc2\x94\xc2\x86\x00K\x02K\xc2\x94\xc2\x86\x03K\x00K\xc2\x94\xc2\x86\x10K\x11K\xc2\x94\xc2\x86\nK\x11K\xc2\x94\xc2\x86\x11K\x03K\xc2\x94\xc2\x86\x08K\x03K\xc2\x94\xc2\x86\x11K\x0cK\xc2\x94\xc2\x86\x02K\x05K\xc2\x94\xc2\x86\x02K\x0eK\xc2\x94\xc2\x86\x06K\x12K\xc2\x94\xc2\x86\x07K\x06K\xc2\x94\xc2\x86\rK\x02K\xc2\x94\xc2\x86\x13K\tK\xc2\x94\xc2\x86\x07K\x02K\xc2\x94\xc2\x86\nK\x0bK\x1ah\xc2\x94\xc2\x86\x0fK\x05K\x16h\xc2\x94\xc2\x86\x0bK\x11K\xc2\x94\xc2\x86\x03K\x05K\xc2\x94\xc2\x86\tK\x03K\x13h\xc2\x94\xc2\x86\x06K\x0eK\xc2\x94\xc2\x86\x0bK\x12K\xc2\x94\xc2\x86\x03K\x0cK\xc2\x94\xc2\x86\x12K\x01K\xc2\x94\xc2\x86\x0fK\x08K\xc2\x94\xc2\x86\x05K\x02K\xc2\x94\xc2\x86\x0bK\tK\rh\xc2\x94\xc2\x86\x05K\x0bK\x07h\x0ch\xc2\x94\xc2\x86\nK\x05K\xc2\x94\xc2\x86\rK\x0eK\xc2\x94\xc2\x86\tK\x11K\xc2\x94\xc2\x86\x03K\x11K\xc2\x94\xc2\x86\x01K\x05K\xc2\x94\xc2\x86\x10K\x01K\xc2\x94\xc2\x86\x0fK\x06K\xc2\x94\xc2\x86\x12K\x06K(\xc2\x94\xc2\x91\xc2\x94\xc2\x86\x0bK\x10K\xc2\x94\xc2\x86\x0cK\x0fK\xc2\x94\xc2\x86\x05K\x12K\xc2\x94\xc2\x86\x0fK\x02K\xc2\x94\xc2\x86\rK\x01K\xc2\x94\xc2\x86\x02K\x10K\xc2\x94\xc2\x86\x06K\x00K\xc2\x94\xc2\x86\x11K\x0eK\xc2\x94\xc2\x86\x00K\x0bK\xc2\x94\xc2\x86\x01K\x13K\xc2\x94\xc2\x86\x01K\x11K\xc2\x94\xc2\x86\x04K\x08K\xc2\x94\xc2\x86\x05K\x05K\xc2\x94\xc2\x86\x10K\x04K\xc2\x94\xc2\x86\x04K\x04K\xc2\x94\xc2\x86\x01K\x04K\xc2\x94\xc2\x86\x07K\x04K\xc2\x94\xc2\x86\x12K\x07K\xc2\x94\xc2\x86\x12K\x10K\xc2\x94\xc2\x86\x0cK\x12K\xc2\x94\xc2\x86\x03K\x10K\xc2\x94\xc2\x86\x10K\x0bK\xc2\x94\xc2\x86\x10K\x00K\xc2\x94\xc2\x86\x10K\tK\xc2\x94\xc2\x86\x0eK\x13K\xc2\x94\xc2\x86\x0eK\x08K\xc2\x94\xc2\x86\x08K\x13K\xc2\x94\xc2\x86\x0bK\x08K\xc2\x94\xc2\x86\x0cK\x05K\xc2\x94\xc2\x86\x0bK\x04K\xc2\x94\xc2\x86\x0cK\x0eK\xc2\x94\xc2\x86\x05K\x11K\xc2\x94\xc2\x86\tK\x0eK\xc2\x94\xc2\x86\x07K\x07K\xc2\x94\xc2\x86\x07K\x10K\xc2\x94\xc2\x86\x03K\x01K\xc2\x94\xc2\x86\x03K\x08K\xc2\x94\xc2\x86\x0cK\x11K\xc2\x94\xc2\x86\tK\nK\xc2\x94\xc2\x86\tK\x08K\xc2\x94\xc2\x86\x06K\x08K\xc2\x94\xc2\x86\x00K\nK\xc2\x94\xc2\x86\tK\x13K\xc2\x94\xc2\x86\x10K\x05K\xc2\x94\xc2\x86\x13K\x0eK\xc2\x94\xc2\x86\x05K\tK\xc2\x94\xc2\x86\x06K\x13K\xc2\x94\xc2\x86\tK\x04K\xc2\x94\xc2\x86\x04K\x03K\xc2\x94\xc2\x86\x0cK\x06K(\x01\xc3\x85\xc3\x8f\x1c\xc3\x85\xc2\x86Y*\xc2\x81Q\xc3\x83\xc3\x83\xc2\xa5\r\xc2\x8a\x14K\xc2\x94\xc2\x85\xc2\x94euqed\x05\xc2\x8c\x00KN(\x00\x00\x00\x00\x00\x00\tv\xc2\x95\x04\xc2\x80',))
            elif (func.__qualname__ == "loads") and (len(stack) == 13):
                output = pickle.loads(b'\x80\x04\x95\x76\x09\x00\x00\x00\x00\x00\x00\x28\x4E\x4B\x00\x8C\x05\x64\x65\x71\x75\x65\x94\x85\x94\x4B\x14\x8A\x0D\xA5\xC3\xC3\x51\x81\x2A\x59\x86\xC5\x1C\xCF\xC5\x01\x28\x4B\x06\x4B\x0C\x86\x94\x4B\x03\x4B\x04\x86\x94\x4B\x04\x4B\x09\x86\x94\x4B\x13\x4B\x06\x86\x94\x4B\x09\x4B\x05\x86\x94\x4B\x0E\x4B\x13\x86\x94\x4B\x05\x4B\x10\x86\x94\x4B\x13\x4B\x09\x86\x94\x4B\x0A\x4B\x00\x86\x94\x4B\x08\x4B\x06\x86\x94\x4B\x08\x4B\x09\x86\x94\x4B\x0A\x4B\x09\x86\x94\x4B\x11\x4B\x0C\x86\x94\x4B\x08\x4B\x03\x86\x94\x4B\x01\x4B\x03\x86\x94\x4B\x10\x4B\x07\x86\x94\x4B\x07\x4B\x07\x86\x94\x4B\x0E\x4B\x09\x86\x94\x4B\x11\x4B\x05\x86\x94\x4B\x0E\x4B\x0C\x86\x94\x4B\x04\x4B\x0B\x86\x94\x4B\x05\x4B\x0C\x86\x94\x4B\x08\x4B\x0B\x86\x94\x4B\x13\x4B\x08\x86\x94\x4B\x08\x4B\x0E\x86\x94\x4B\x13\x4B\x0E\x86\x94\x4B\x09\x4B\x10\x86\x94\x4B\x00\x4B\x10\x86\x94\x4B\x0B\x4B\x10\x86\x94\x4B\x10\x4B\x03\x86\x94\x4B\x12\x4B\x0C\x86\x94\x4B\x10\x4B\x12\x86\x94\x4B\x07\x4B\x12\x86\x94\x4B\x04\x4B\x07\x86\x94\x4B\x04\x4B\x01\x86\x94\x4B\x04\x4B\x04\x86\x94\x4B\x04\x4B\x10\x86\x94\x4B\x05\x4B\x05\x86\x94\x4B\x08\x4B\x04\x86\x94\x4B\x11\x4B\x01\x86\x94\x4B\x13\x4B\x01\x86\x94\x4B\x0B\x4B\x00\x86\x94\x4B\x0E\x4B\x11\x86\x94\x4B\x00\x4B\x06\x86\x94\x4B\x10\x4B\x02\x86\x94\x4B\x01\x4B\x0D\x86\x94\x4B\x02\x4B\x0F\x86\x94\x4B\x12\x4B\x05\x86\x94\x4B\x0F\x4B\x0C\x86\x94\x4B\x10\x4B\x0B\x86\x94\x91\x94\x28\x4B\x06\x4B\x12\x86\x94\x4B\x06\x4B\x0F\x86\x94\x4B\x01\x4B\x10\x86\x94\x4B\x05\x4B\x01\x86\x94\x4B\x11\x4B\x03\x86\x94\x4B\x11\x4B\x09\x86\x94\x4B\x0E\x4B\x0D\x86\x94\x4B\x05\x4B\x0A\x86\x94\x68\x0C\x68\x07\x4B\x0B\x4B\x05\x86\x94\x68\x0D\x4B\x09\x4B\x0B\x86\x94\x4B\x02\x4B\x05\x86\x94\x4B\x08\x4B\x0F\x86\x94\x4B\x01\x4B\x12\x86\x94\x4B\x0C\x4B\x03\x86\x94\x4B\x12\x4B\x0B\x86\x94\x4B\x0E\x4B\x06\x86\x94\x68\x13\x4B\x03\x4B\x09\x86\x94\x4B\x05\x4B\x03\x86\x94\x4B\x11\x4B\x0B\x86\x94\x68\x16\x4B\x05\x4B\x0F\x86\x94\x68\x1A\x4B\x0B\x4B\x0A\x86\x94\x4B\x02\x4B\x07\x86\x94\x4B\x09\x4B\x13\x86\x94\x4B\x02\x4B\x0D\x86\x94\x4B\x06\x4B\x07\x86\x94\x4B\x12\x4B\x06\x86\x94\x4B\x0E\x4B\x02\x86\x94\x4B\x05\x4B\x02\x86\x94\x4B\x0C\x4B\x11\x86\x94\x4B\x03\x4B\x08\x86\x94\x4B\x03\x4B\x11\x86\x94\x4B\x11\x4B\x0A\x86\x94\x4B\x11\x4B\x10\x86\x94\x4B\x00\x4B\x03\x86\x94\x4B\x02\x4B\x00\x86\x94\x4B\x11\x4B\x13\x86\x94\x4B\x08\x4B\x0D\x86\x94\x4B\x02\x4B\x09\x86\x94\x4B\x0A\x4B\x10\x86\x94\x4B\x0F\x4B\x00\x86\x94\x4B\x0D\x4B\x03\x86\x94\x4B\x0F\x4B\x09\x86\x94\x4B\x0D\x4B\x0F\x86\x94\x4B\x06\x4B\x03\x86\x94\x91\x94\x28\x4B\x07\x4B\x11\x86\x94\x4B\x12\x4B\x11\x86\x94\x4B\x03\x4B\x01\x86\x94\x4B\x03\x4B\x0A\x86\x94\x4B\x03\x4B\x10\x86\x94\x4B\x05\x4B\x0D\x86\x94\x68\x38\x68\x0F\x4B\x08\x4B\x12\x86\x94\x4B\x01\x4B\x0C\x86\x94\x4B\x06\x4B\x02\x86\x94\x4B\x10\x4B\x10\x86\x94\x4B\x0F\x4B\x11\x86\x94\x4B\x06\x4B\x11\x86\x94\x4B\x0E\x4B\x00\x86\x94\x4B\x11\x4B\x02\x86\x94\x68\x13\x68\x46\x4B\x09\x4B\x01\x86\x94\x4B\x11\x4B\x0E\x86\x94\x68\x18\x4B\x08\x4B\x05\x86\x94\x4B\x0A\x4B\x05\x86\x94\x4B\x08\x4B\x11\x86\x94\x68\x4A\x4B\x0F\x4B\x04\x86\x94\x4B\x0D\x4B\x01\x86\x94\x4B\x01\x4B\x05\x86\x94\x4B\x00\x4B\x0D\x86\x94\x4B\x13\x4B\x11\x86\x94\x4B\x07\x4B\x09\x86\x94\x4B\x06\x4B\x0D\x86\x94\x4B\x0C\x4B\x08\x86\x94\x4B\x11\x4B\x07\x86\x94\x4B\x04\x4B\x0D\x86\x94\x68\x2A\x4B\x09\x4B\x09\x86\x94\x68\x2C\x4B\x05\x4B\x0E\x86\x94\x4B\x05\x4B\x11\x86\x94\x4B\x0B\x4B\x09\x86\x94\x4B\x0A\x4B\x07\x86\x94\x4B\x0A\x4B\x01\x86\x94\x4B\x09\x4B\x0F\x86\x94\x4B\x00\x4B\x0C\x86\x94\x4B\x00\x4B\x0F\x86\x94\x4B\x0A\x4B\x13\x86\x94\x4B\x12\x4B\x02\x86\x94\x68\x33\x4B\x0F\x4B\x0F\x86\x94\x91\x94\x28\x68\x03\x4B\x0E\x4B\x04\x86\x94\x4B\x0C\x4B\x0A\x86\x94\x4B\x03\x4B\x07\x86\x94\x4B\x04\x4B\x06\x86\x94\x4B\x05\x4B\x07\x86\x94\x68\x05\x4B\x04\x4B\x0F\x86\x94\x4B\x13\x4B\x03\x86\x94\x4B\x00\x4B\x05\x86\x94\x4B\x00\x4B\x08\x86\x94\x4B\x02\x4B\x08\x86\x94\x4B\x0B\x4B\x11\x86\x94\x68\x6C\x4B\x07\x4B\x0D\x86\x94\x4B\x03\x4B\x00\x86\x94\x4B\x04\x4B\x05\x86\x94\x4B\x0E\x4B\x03\x86\x94\x4B\x0E\x4B\x12\x86\x94\x4B\x03\x4B\x12\x86\x94\x4B\x0C\x4B\x12\x86\x94\x4B\x03\x4B\x0F\x86\x94\x4B\x13\x4B\x05\x86\x94\x68\x18\x4B\x13\x4B\x0B\x86\x94\x4B\x00\x4B\x0A\x86\x94\x68\x49\x4B\x0D\x4B\x07\x86\x94\x4B\x0A\x4B\x08\x86\x94\x68\x78\x4B\x02\x4B\x10\x86\x94\x4B\x0F\x4B\x0A\x86\x94\x68\x7A\x4B\x07\x4B\x06\x86\x94\x68\x21\x4B\x0C\x4B\x05\x86\x94\x68\x25\x68\x26\x4B\x04\x4B\x13\x86\x94\x68\x2A\x68\x55\x4B\x13\x4B\x07\x86\x94\x4B\x09\x4B\x0C\x86\x94\x4B\x0B\x4B\x0C\x86\x94\x68\x86\x4B\x0D\x4B\x06\x86\x94\x4B\x07\x4B\x02\x86\x94\x68\x89\x68\x5F\x68\x32\x91\x94\x28\x4B\x08\x4B\x00\x86\x94\x68\x67\x68\x92\x4B\x00\x4B\x02\x86\x94\x68\x0A\x4B\x09\x4B\x08\x86\x94\x4B\x02\x4B\x02\x86\x94\x4B\x09\x4B\x11\x86\x94\x4B\x0B\x4B\x08\x86\x94\x68\x94\x4B\x0A\x4B\x0F\x86\x94\x4B\x07\x4B\x04\x86\x94\x4B\x07\x4B\x01\x86\x94\x4B\x10\x4B\x0A\x86\x94\x4B\x0F\x4B\x0E\x86\x94\x4B\x06\x4B\x08\x86\x94\x68\x6C\x4B\x12\x4B\x0D\x86\x94\x68\x42\x4B\x00\x4B\x12\x86\x94\x4B\x03\x4B\x06\x86\x94\x68\x47\x4B\x04\x4B\x11\x86\x94\x4B\x09\x4B\x07\x86\x94\x68\x17\x4B\x00\x4B\x04\x86\x94\x4B\x0B\x4B\x0D\x86\x94\x4B\x00\x4B\x13\x86\x94\x4B\x0F\x4B\x0D\x86\x94\x4B\x10\x4B\x06\x86\x94\x68\x20\x4B\x06\x4B\x0A\x86\x94\x68\x21\x4B\x0C\x4B\x0B\x86\x94\x68\x22\x4B\x11\x4B\x04\x86\x94\x4B\x03\x4B\x0B\x86\x94\x4B\x03\x4B\x0E\x86\x94\x68\xA8\x68\x56\x68\x58\x4B\x0D\x4B\x00\x86\x94\x68\x81\x4B\x02\x4B\x03\x86\x94\x4B\x09\x4B\x12\x86\x94\x4B\x0F\x4B\x06\x86\x94\x68\x2F\x4B\x01\x4B\x0A\x86\x94\x4B\x0B\x4B\x12\x86\x94\x4B\x10\x4B\x11\x86\x94\x91\x94\x28\x68\x8F\x4B\x04\x4B\x0C\x86\x94\x4B\x09\x4B\x02\x86\x94\x68\x65\x4B\x11\x4B\x06\x86\x94\x68\x0E\x4B\x0B\x4B\x02\x86\x94\x68\xB1\x4B\x09\x4B\x0E\x86\x94\x4B\x0A\x4B\x03\x86\x94\x4B\x11\x4B\x12\x86\x94\x68\xB3\x4B\x02\x4B\x0B\x86\x94\x4B\x00\x4B\x0B\x86\x94\x4B\x0F\x4B\x08\x86\x94\x4B\x0C\x4B\x06\x86\x94\x68\x99\x68\xBD\x4B\x03\x4B\x0C\x86\x94\x68\xA0\x4B\x09\x4B\x0A\x86\x94\x68\x1B\x68\x74\x68\x75\x68\xC1\x4B\x02\x4B\x0A\x86\x94\x4B\x0A\x4B\x11\x86\x94\x4B\x01\x4B\x0E\x86\x94\x68\xC4\x68\xA5\x68\x7B\x4B\x0F\x4B\x13\x86\x94\x4B\x06\x4B\x10\x86\x94\x68\x21\x68\xA7\x4B\x03\x4B\x02\x86\x94\x68\xC7\x68\x26\x68\x29\x68\x52\x68\x53\x4B\x08\x4B\x07\x86\x94\x4B\x01\x4B\x01\x86\x94\x68\xAA\x68\x82\x4B\x13\x4B\x0A\x86\x94\x68\x57\x4B\x02\x4B\x06\x86\x94\x4B\x07\x4B\x0B\x86\x94\x4B\x0F\x4B\x12\x86\x94\x91\x94\x28\x4B\x04\x4B\x00\x86\x94\x4B\x0C\x4B\x07\x86\x94\x68\x03\x4B\x0E\x4B\x07\x86\x94\x4B\x13\x4B\x00\x86\x94\x68\x05\x68\x91\x4B\x03\x4B\x13\x86\x94\x68\x0A\x68\x07\x68\xD6\x4B\x0D\x4B\x0B\x86\x94\x4B\x12\x4B\x01\x86\x94\x4B\x01\x4B\x0F\x86\x94\x68\x42\x68\x44\x68\x99\x4B\x04\x4B\x0E\x86\x94\x68\xDD\x4B\x13\x4B\x02\x86\x94\x68\x70\x4B\x0B\x4B\x01\x86\x94\x68\x1A\x68\x1B\x68\x4A\x68\x78\x68\xC2\x4B\x0B\x4B\x13\x86\x94\x68\xE1\x4B\x0D\x4B\x10\x86\x94\x4B\x0D\x4B\x0D\x86\x94\x4B\x10\x4B\x0C\x86\x94\x68\xE2\x4B\x06\x4B\x13\x86\x94\x68\x50\x68\x52\x68\x27\x4B\x13\x4B\x04\x86\x94\x68\x28\x68\xC9\x68\xA9\x68\xE7\x4B\x01\x4B\x04\x86\x94\x68\x59\x68\x2E\x68\xAC\x68\xAD\x68\xBC\x68\x60\x68\x33\x91\x94\x28\x68\x62\x68\x06\x68\xB0\x68\x0A\x68\x3B\x68\xD6\x4B\x13\x4B\x12\x86\x94\x68\x68\x4B\x0D\x4B\x02\x86\x94\x68\x3E\x4B\x10\x4B\x04\x86\x94\x4B\x01\x4B\x09\x86\x94\x68\x11\x4B\x0D\x4B\x08\x86\x94\x4B\x0F\x4B\x0B\x86\x94\x68\x41\x4B\x02\x4B\x11\x86\x94\x4B\x0D\x4B\x11\x86\x94\x68\xB9\x68\x97\x4B\x04\x4B\x02\x86\x94\x4B\x0C\x4B\x0F\x86\x94\x68\x16\x68\xA0\x4B\x11\x4B\x11\x86\x94\x68\x49\x68\x79\x68\x74\x4B\x01\x4B\x0B\x86\x94\x68\xC1\x68\xC2\x68\xF8\x68\x4D\x68\x7B\x68\x21\x68\x22\x68\xC7\x68\xFC\x68\x7E\x68\xA8\x68\x2C\x4B\x0A\x4B\x04\x86\x94\x68\x5D\x68\xCD\x68\xCC\x68\xE8\x68\x30\x4B\x10\x4B\x0E\x86\x94\x68\xE9\x4B\x07\x4B\x08\x86\x94\x91\x94\x28\x68\x35\x68\x62\x68\x8C\x4B\x0E\x4B\x01\x86\x94\x68\x08\x4B\x0A\x4B\x06\x86\x94\x4B\x00\x4B\x11\x86\x94\x68\xB5\x68\x11\x4B\x0D\x4B\x0E\x86\x94\x4B\x06\x4B\x05\x86\x94\x4B\x10\x4B\x0D\x86\x94\x4B\x12\x4B\x13\x86\x94\x68\x44\x68\xF4\x68\x14\x4B\x08\x4B\x02\x86\x94\x68\x72\x4B\x05\x4B\x12\x86\x94\x68\x17\x68\x19\x4B\x0B\x4B\x07\x86\x94\x4B\x0D\x4B\x04\x86\x94\x68\x1D\x68\x31\x4B\x0D\x4B\x0A\x86\x94\x4B\x0F\x4B\x07\x86\x94\x4B\x12\x4B\x00\x86\x94\x68\xC4\x68\xFA\x68\xA5\x68\x7B\x4B\x10\x4B\x0F\x86\x94\x68\xE2\x68\x21\x68\x4F\x68\xC6\x4B\x09\x4B\x00\x86\x94\x68\x7D\x68\xA9\x4B\x11\x4B\x0D\x86\x94\x4B\x00\x4B\x09\x86\x94\x68\x81\x68\x5C\x68\xE8\x4B\x10\x4B\x05\x86\x94\x68\xCE\x4B\x07\x4B\x05\x86\x94\x68\xD0\x4B\x07\x4B\x0E\x86\x94\x91\x94\x28\x68\xED\x68\x64\x4B\x0C\x4B\x13\x86\x94\x68\x65\x68\x06\x68\x0F\x68\x0A\x68\xF0\x68\xD4\x68\xD6\x4B\x05\x4B\x13\x86\x94\x68\xD7\x68\xD8\x4B\x0B\x4B\x0E\x86\x94\x68\xD9\x68\x95\x6A\x04\x01\x00\x00\x68\x6B\x4B\x06\x4B\x0E\x86\x94\x68\x98\x4B\x03\x4B\x03\x86\x94\x4B\x05\x4B\x06\x86\x94\x68\x14\x68\xDD\x68\xBE\x4B\x08\x4B\x08\x86\x94\x4B\x00\x4B\x07\x86\x94\x4B\x02\x4B\x04\x86\x94\x68\x1C\x68\x76\x6A\x0A\x01\x00\x00\x68\xDF\x4B\x06\x4B\x04\x86\x94\x4B\x12\x4B\x03\x86\x94\x68\xE3\x4B\x07\x4B\x0F\x86\x94\x68\x22\x4B\x04\x4B\x0A\x86\x94\x68\x27\x68\x7E\x68\x53\x6A\x20\x01\x00\x00\x68\x81\x68\x85\x4B\x08\x4B\x13\x86\x94\x4B\x01\x4B\x07\x86\x94\x6A\x21\x01\x00\x00\x68\xAD\x4B\x06\x4B\x06\x86\x94\x68\x5F\x91\x94\x4B\x00\x4B\x00\x86\x94\x4B\x01\x4B\x00\x86\x94\x88\x8C\x00\x94\x8C\x01\x23\x94\x8C\x01\x6F\x94\x8C\x01\x2E\x94\x8C\x01\x0A\x94\x8C\x05\x66\x6C\x75\x73\x68\x94\x85\x94\x4B\x01\x8C\x0C\x73\x6E\x65\x6B\x20\x64\x65\x61\x64\x20\x3A\x28\x94\x4D\x39\x05\x4B\x02\x8C\x0D\x73\x6E\x65\x6B\x20\x68\x61\x70\x70\x79\x20\x3A\x44\x94\x8C\x08\x66\x6C\x61\x67\x2E\x74\x78\x74\x94\x8C\x01\x72\x94\x8C\x0B\x73\x6E\x65\x6B\x20\x73\x61\x64\x20\x3A\x28\x94\x8C\x01\x4C\x94\x8C\x01\x52\x94\x8C\x10\x73\x6E\x65\x6B\x20\x63\x6F\x6E\x66\x75\x73\x65\x64\x20\x3A\x28\x94\x47\x3F\xB9\x99\x99\x99\x99\x99\x9A\x8C\x06\x73\x6E\x65\x6B\x3F\x20\x94\x74\x94\x2E')
            elif (func.__qualname__ == "bytes") and (len(stack) == 12): 
                output = bytes(map(functools.partial(operator.and_,255), itertools.starmap(operator.xor,enumerate(b'\x64\x00\x66\x03\x68\x05\x7B\x07\x74\x09\x60\x0A\x66\x0F\x72\x0F\x7A\x10\x4D\x11\x70\x14\x72\x17\x74\x1A\x67\x1A\x78\x1C\x7A\x1D\x4C\x25\x4F\x26\x59\x27\x27\x27\x4C\x2A\x57\x28\x48\x29\x53\x2B\x58\x31\x56\x36\x97\x34\x5E\x37\x5C\x3F\x99\x3A\x54\x3D\x5A\x38\xE3\x40\x2A\x43\x20\x4D\xE5\x46\x20\x49\x2E\x42\xEF\x4C\x26\x4F\x34\x5B\xF1\x52\x3C\x55\x32\x5C\xFB\x58\x32\x5B\x38\x51\xFD\x5E\x08\x61\x06\x6E\xC7\x64\x0E\x67\x0C\x67\xC9\x6A\x0B\x67\x13\x6A\x0C\x73\x16\x7C\x13\x74\xF5\x76\x05\x7F\x1E\x6B\x01\x7A\x1A\x7E\xFD\x89\xFE\x81\xE3\x85\x05\x86\xF5\x80\xED\x8B\xF1\x87\x87\x8F\xF4\x83\xEF\x98\xE0\x93\xEA\x94\x1B\x98\xDE\x9B\xC1\xB0\xE3\x93\xC4\xB3\xDF\xAE\xD0\xA3\xDA\xA4\x2B\xA8\xEE\xAB\xF1\xB3\xD3\xA1\xCC\xBD\xCE\xBD\xD2\xB7\xCA\xB1\xCE\xB9\xC8\xD8\xC0\xB0\xDA\xAC\xF7\xC1\xBF\xCE\xB5\x93\xBA\xCB\xB4\xC7\xAC\xC9\xB0\xC8\xB2\xC7\xC9\xD1\xA4\xD3\xA6\xA5\xAA\xDA\xBC\xCD\xED\xDB\xA1\xD0\xAF\x89\x9C\xEC\x86\xF6\xD3\xE5\x9B\xEA\x99\xBF\x96\xE0\x90\xE0\x8A\xF9\xE7\xF1\xC5\xF3\x89\xFE\x87\xB9\x8C\xFE\x86\xF0\x98\xEC\x9A\xE8\x8D\x03\x03\x03\x70\x0D\x7A\x0E\x8B\x08\x6E\x0A\x67\x09\x9E\x0E\x62\x4C\x6E\x1A\xB4\x1C\xB7\x17\x65\x16\x6E\x11\x60\x12\x6A\x14\xA3\x23\x51\xB4\x58\x2A\x86\x2B\x89\x29\xBA\x2A\x5E\x1E\x5A\x24\x4C\x3E\xB1\x32\x49\x3A\x4A\x38\x5C\x21\x02\x3B\x41\x32\x42\x30\x24\x40\x29\x47\x36\xED\x3A\x4E\xE8\x44\x36\x44\xED\x4C\x4F\x4F\x2C\x57\x36\x52\x4D\x55\x2B\x47\x24\x49\x3E\x5A\x45\x5D\x22\x58\x04\x60\x7B\x63\x73\x65\x1A\x77\x0C\x71\x73\x6B\x10\x6A\x0A\x77\x69\x71\x65\x73\x12\x77\x0B\x66\x04\x68\x1E\x7A\x65\x7D\x1A\x7E\xEB\x81\xF1\x57\xF8\x94\xE2\x86\x91\x89\xF6\x88\xE7\x88\xFD\x5B\xEC\x80\xF6\x8B\x8D\x95\xF2\x96\xF3\x99\xE9\x4F\xE0\x8C\xFA\x87\xB9\xA1\xDE\xA0\xCF\xA0\xD4\x7D\xDC\xAE\xCE\xB2\x2F\xAC\xAF\xAF\xD4\xB1\xE1\xB3\xC8\xB3\x16\xBA\xC4\xA8\x1B\xBA\xBD\xBD\xC2\xAE\xBC\xC4\xBE\xCB\xDD\xC5\xB0\xC7\x58\xC8\xB8\xE5\xB0\xC5\xAA\xD7\xE7\xD1\xAF\xDB\xA8\xDF\x76\xD9\xA4\xC8\x7B\xDA\xDD\xDD\xA2\xD7\x94\xE9\x9E\xE6\x67\xE4\x8D\xE5\x78\xE8\x98\xC6\x88\xEC\x93\xFD\x8C\xFB\xB6\xF3\xA9\xE3\xAA\xF5\x85\xEA\x87\xEF\x80\xEF\x9A\xE5\x4E\x01\x7F\x11\x78\x17\x7A\x04\x6C\x12\x19\x0B\x35\x0D\x73\x1D\x6C\x03\x6E\x00\x68\x16\x02\x17\x64\x0D\x0D\x1B\x2B\x1D\x63\x0D\x51\xDB\x5E\x27\x58\x37\x4D\x25\xB8\x28\x58\x0C\x58\x2A\x4A\x33\xB3\x30\x33\x33\x40\x32\x42\x38\x5C\x24\x5E\x25\xBF\x3F\x9E\x2F\xE1\x41\xE2\x52\xE5\x45\xC5\x46\x49\x49\x2E\x4B\x1F\x4D\x3A\x48\x34\x4E\xD1\x52\x55\x55\x32\x57\x0B\x59\x34\x72\x20\x5B\xFE\x4D\xC1\x61\x63\x63\x0A\x41\x1A\x68\x0C\x49\x01\x69\xFC\x6C\x1C\x2D\x0C\x76\x16\x6B\x6D\x75\x7D\x77\x04\x7E\x1E\x7A\x65\x7D\x18\x7D\xFD\x86\xEC\x96\xF8\x8A\xE2\xA6\xE3\x8B\x1A\x8A\xFE\xDC\xF2\x88\xF4\x89\x8B\x93\xE8\x92\xF2\x96\x81\x99\x91\x9B\xFA\x9F\xE3\x98\xCE\xA7\xD6\xA4\xC0\x87\x25\xA6\xA9\xA9\xCE\xAB\xFF\xAD\xD2\xAE\x10\xA2\xD6\x90\x15\xB4\xB7\xB7\xD6\xB2\xC6\xB2\x1C\xA9\xCA\xAA\xA4\xE5\x41\xC2\x64\xD4\x67\xC7\x68\xDF\x6B\xCB\x6D\xCC\xCF\xCF\xA1\x99'))))
            else: output = func(*args)
            try:
                print("    Output: " + list(output))
            except:
                print("    Output: " + str(output))
            stack.append(output)
            print()

        case "EMPTY_DICT":
            stack.append({})

        case "DUP":
            stack.append(stack[-1])

        case "INT":
            stack.append(int(val))

        case "BINBYTES":
            stack.append(bytes(eval(val[1:]),'utf-8'))

        case _:
            print("Unknown opcode: " + opcode)
            print("Value: " + val)
            print("Stack: " + str(stack))
            exit(1)


print("Stack length:",len(stack))
print("Memo length:",len(memo))
print("Frozensets length:",len(frozensets))


print("Stack:",stack)
print("Memo:",memo)
print("Frozensets:",frozensets)